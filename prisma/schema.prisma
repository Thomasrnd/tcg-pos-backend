// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AdminRole {
  MASTER_ADMIN
  ADMIN
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id            Int           @id @default(autoincrement())
  customerName  String
  totalAmount   Float
  status        OrderStatus
  paymentMethod PaymentMethod @default(BANK_TRANSFER)
  paymentProof  PaymentProof?
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PAYMENT_UPLOADED
  PAYMENT_VERIFIED
  COMPLETED
  CANCELLED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  subtotal  Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model PaymentProof {
  id        Int      @id @default(autoincrement())
  fileUrl   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  QRIS  // For future use
  E_WALLET     // For future use
}

model PaymentMethodSetting {
  id            Int       @id @default(autoincrement())
  method        String    @unique
  name          String
  description   String?
  isEnabled     Boolean   @default(true)
  requiresProof Boolean   @default(false)
  sortOrder     Int       @default(0)
  
  bankName      String?
  accountNumber String?
  accountHolder String?

  qrisImageUrl  String? 
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}